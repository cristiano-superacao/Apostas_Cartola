name: Deploy Frontend to Netlify

on:
  push:
    branches: [ main, develop ]
    paths: 
      - 'frontend/**'
      - '.github/workflows/deploy-frontend.yml'
  pull_request:
    branches: [ main ]
    paths: 
      - 'frontend/**'

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci
      
    - name: Run linting
      working-directory: ./frontend
      run: npm run lint
      
    - name: Run type checking
      working-directory: ./frontend
      run: npm run type-check
      
    - name: Build application
      working-directory: ./frontend
      env:
        NEXT_PUBLIC_API_URL: ${{ github.ref == 'refs/heads/main' && secrets.PROD_API_URL || secrets.STAGING_API_URL }}
        NETLIFY: true
      run: npm run build
      
    - name: Deploy to Netlify (Production)
      if: github.ref == 'refs/heads/main'
      uses: netlify/actions/cli@master
      with:
        args: deploy --dir=frontend/.next --prod
      env:
        NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
        NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
        
    - name: Deploy to Netlify (Preview)
      if: github.ref != 'refs/heads/main'
      uses: netlify/actions/cli@master
      with:
        args: deploy --dir=frontend/.next
      env:
        NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
        NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
        
    - name: Comment PR with preview URL
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const { data: deployments } = await github.rest.repos.listDeployments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: context.payload.pull_request.head.sha
          });
          
          if (deployments.length > 0) {
            const deployment = deployments[0];
            const { data: statuses } = await github.rest.repos.listDeploymentStatuses({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deployment.id
            });
            
            const successStatus = statuses.find(status => status.state === 'success');
            if (successStatus && successStatus.target_url) {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `ğŸš€ Frontend preview deployed! Check it out: ${successStatus.target_url}`
              });
            }
          }